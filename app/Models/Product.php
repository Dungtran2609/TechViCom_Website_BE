<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Product extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'name',
        'slug',
        'sku',
        'type',
        'price',
        'sale_price',
        'stock',
        'low_stock_amount',
        'short_description',
        'long_description',
        'thumbnail',
        'status',
        'brand_id',
        'category_id',
    ];

    protected $casts = [
        'price' => 'float',
        'sale_price' => 'float',
        'stock' => 'integer',
    ];

    // ğŸ‘‰ Quan há»‡ tá»›i thÆ°Æ¡ng hiá»‡u
    public function brand()
    {
        return $this->belongsTo(Brand::class);
    }

    // ğŸ‘‰ Quan há»‡ tá»›i danh má»¥c
    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    // ğŸ‘‰ Danh sÃ¡ch táº¥t cáº£ áº£nh phá»¥
    public function allImages()
    {
        return $this->hasMany(ProductAllImage::class);
    }
    // app/Models/Product.php

    public function variants()
    {
        return $this->hasMany(ProductVariant::class);
    }
    // ğŸ‘‰ Quan há»‡ tá»›i cÃ¡c biáº¿n thá»ƒ sáº£n pháº©m
    public function getDisplayPriceAttribute()
{
    if ($this->type === 'simple') {
        return $this->price
            ? number_format($this->price, 0, ',', '.') . ' Ä‘'
            : 'ChÆ°a cÃ³ giÃ¡';
    }

    if ($this->variants->count()) {
        $min = $this->variants->min('price');
        $max = $this->variants->max('price');

        return ($min && $max)
            ? 'Tá»« ' . number_format($min, 0, ',', '.') . ' Ä‘ - ' . number_format($max, 0, ',', '.') . ' Ä‘'
            : 'ChÆ°a cÃ³ giÃ¡';
    }

    return 'ChÆ°a cÃ³ giÃ¡';
}


}